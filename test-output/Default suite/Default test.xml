<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="AgBe" failures="0" tests="10" name="Default test" time="1.623" errors="0" timestamp="2025-07-27T20:36:24 IST">
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeClass setupDriver" time="0.733">
    <failure type="org.openqa.selenium.SessionNotCreatedException" message="Could not start a new session. Possible causes are invalid address of the remote server or browser start-up failure. 
Host info: host: &amp;apos;AGBE&amp;apos;, ip: &amp;apos;192.168.1.109&amp;apos;
Build info: version: &amp;apos;4.34.0&amp;apos;, revision: &amp;apos;707dcb4246*&amp;apos;
System info: os.name: &amp;apos;Windows 10&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;10.0&amp;apos;, java.version: &amp;apos;17.0.12&amp;apos;
Driver info: io.appium.java_client.android.AndroidDriver
Command: [null, newSession {capabilities=[Capabilities {appium:appActivity: com.tvs_pgm.tvs.MainActivity, appium:appPackage: com.tvs.tvs_pgm_uat, appium:automationName: UIAutomator2, appium:deviceName: Samsung SM-A528B, appium:dontStopAppOnReset: true, appium:noReset: true, platformName: ANDROID}]}]
Capabilities {appium:appActivity: com.tvs_pgm.tvs.MainActivity, appium:appPackage: com.tvs.tvs_pgm_uat, appium:automationName: UIAutomator2, appium:deviceName: Samsung SM-A528B, appium:dontStopAppOnReset: true, appium:noReset: true, platformName: ANDROID}">
      <![CDATA[org.openqa.selenium.SessionNotCreatedException: Could not start a new session. Possible causes are invalid address of the remote server or browser start-up failure. 
Host info: host: 'AGBE', ip: '192.168.1.109'
Build info: version: '4.34.0', revision: '707dcb4246*'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.12'
Driver info: io.appium.java_client.android.AndroidDriver
Command: [null, newSession {capabilities=[Capabilities {appium:appActivity: com.tvs_pgm.tvs.MainActivity, appium:appPackage: com.tvs.tvs_pgm_uat, appium:automationName: UIAutomator2, appium:deviceName: Samsung SM-A528B, appium:dontStopAppOnReset: true, appium:noReset: true, platformName: ANDROID}]}]
Capabilities {appium:appActivity: com.tvs_pgm.tvs.MainActivity, appium:appPackage: com.tvs.tvs_pgm_uat, appium:automationName: UIAutomator2, appium:deviceName: Samsung SM-A528B, appium:dontStopAppOnReset: true, appium:noReset: true, platformName: ANDROID}
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:562)
at io.appium.java_client.AppiumDriver.startSession(AppiumDriver.java:313)
at org.openqa.selenium.remote.RemoteWebDriver.<init>(RemoteWebDriver.java:173)
at io.appium.java_client.AppiumDriver.<init>(AppiumDriver.java:101)
at io.appium.java_client.AppiumDriver.<init>(AppiumDriver.java:113)
at io.appium.java_client.android.AndroidDriver.<init>(AndroidDriver.java:109)
at com.tvs.pgm.twoW.mobile.base.DriverManager.initializeDriver(DriverManager.java:34)
at com.tvs.pgm.twoW.mobile.tests.BaseTest.setupDriver(BaseTest.java:52)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:71)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:400)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:333)
at org.testng.internal.invokers.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:188)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
Caused by: java.io.UncheckedIOException: java.net.ConnectException
at org.openqa.selenium.remote.http.jdk.JdkHttpClient.execute0(JdkHttpClient.java:500)
at io.appium.java_client.internal.filters.AppiumIdempotencyFilter.lambda$apply$0(AppiumIdempotencyFilter.java:35)
at io.appium.java_client.internal.filters.AppiumUserAgentFilter.lambda$apply$0(AppiumUserAgentFilter.java:86)
at org.openqa.selenium.remote.http.Filter.lambda$andFinally$1(Filter.java:55)
at org.openqa.selenium.remote.http.jdk.JdkHttpClient.lambda$executeAsync$2(JdkHttpClient.java:387)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:842)
Caused by: java.net.ConnectException
at java.net.http/jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:574)
at java.net.http/jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:123)
at org.openqa.selenium.remote.http.jdk.JdkHttpClient.execute0(JdkHttpClient.java:459)
... 9 more
Caused by: java.net.ConnectException
at java.net.http/jdk.internal.net.http.common.Utils.toConnectException(Utils.java:1055)
at java.net.http/jdk.internal.net.http.PlainHttpConnection.connectAsync(PlainHttpConnection.java:198)
at java.net.http/jdk.internal.net.http.PlainHttpConnection.checkRetryConnect(PlainHttpConnection.java:230)
at java.net.http/jdk.internal.net.http.PlainHttpConnection.lambda$connectAsync$1(PlainHttpConnection.java:206)
at java.base/java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:934)
at java.base/java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:911)
at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:510)
at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1773)
... 3 more
Caused by: java.nio.channels.ClosedChannelException
at java.base/sun.nio.ch.SocketChannelImpl.ensureOpen(SocketChannelImpl.java:195)
at java.base/sun.nio.ch.SocketChannelImpl.beginConnect(SocketChannelImpl.java:760)
at java.base/sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:848)
at java.net.http/jdk.internal.net.http.PlainHttpConnection.lambda$connectAsync$0(PlainHttpConnection.java:183)
at java.base/java.security.AccessController.doPrivileged(AccessController.java:569)
at java.net.http/jdk.internal.net.http.PlainHttpConnection.connectAsync(PlainHttpConnection.java:185)
... 9 more
]]>
    </failure>
  </testcase> <!-- @BeforeClass setupDriver -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="@BeforeClass setupPage" time="0.022">
    <failure type="java.lang.IllegalStateException" message="Driver is not initialized; call initializeDriver() first.">
      <![CDATA[java.lang.IllegalStateException: Driver is not initialized; call initializeDriver() first.
at com.tvs.pgm.twoW.mobile.base.DriverManager.getDriver(DriverManager.java:66)
at com.tvs.pgm.twoW.mobile.pages.BasePage.<init>(BasePage.java:18)
at com.tvs.pgm.twoW.mobile.pages.LoginPage.<init>(LoginPage.java:43)
at com.tvs.pgm.twoW.mobile.tests.LoginTest.setupPage(LoginTest.java:25)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:71)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:400)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:333)
at org.testng.internal.invokers.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:188)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
    </failure>
  </testcase> <!-- @BeforeClass setupPage -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterClass tearDownDriver" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterClass tearDownDriver -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="verifyLocationPermissionPopupDisplayed" time="0.001">
    <skipped/>
  </testcase> <!-- verifyLocationPermissionPopupDisplayed -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="verifyLocationPermissionText" time="0.0">
    <skipped/>
  </testcase> <!-- verifyLocationPermissionText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="allowLocationPermission" time="0.0">
    <skipped/>
  </testcase> <!-- allowLocationPermission -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="verifyEnterMobileNumberFieldDisplayed" time="0.0">
    <skipped/>
  </testcase> <!-- verifyEnterMobileNumberFieldDisplayed -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="verifyInvalidMobileNumberBlocked" time="0.0">
    <skipped/>
  </testcase> <!-- verifyInvalidMobileNumberBlocked -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="enterValidMobileNumber" time="0.0">
    <skipped/>
  </testcase> <!-- enterValidMobileNumber -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="clickVerifyNumberButton" time="0.0">
    <skipped/>
  </testcase> <!-- clickVerifyNumberButton -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="verifyOtpScreenDisplayed" time="0.0">
    <skipped/>
  </testcase> <!-- verifyOtpScreenDisplayed -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="clickOtpField" time="0.0">
    <skipped/>
  </testcase> <!-- clickOtpField -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="enterOtp" time="0.0">
    <skipped/>
  </testcase> <!-- enterOtp -->
</testsuite> <!-- Default test -->
