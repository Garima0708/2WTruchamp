<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="2" hostname="AgBe" failures="5" tests="51" name="2W Tests" time="55.582" errors="0" timestamp="2025-07-22T19:00:16 IST">
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.026">
    <failure type="org.openqa.selenium.WebDriverException" message="An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up
Build info: version: &amp;apos;4.34.0&amp;apos;, revision: &amp;apos;707dcb4246*&amp;apos;
System info: os.name: &amp;apos;Windows 10&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;10.0&amp;apos;, java.version: &amp;apos;17.0.12&amp;apos;
Driver info: io.appium.java_client.android.AndroidDriver
Command: [2b89d975-5f61-45d7-b82e-bf2e89a240bb, screenshot {}]
Capabilities {appium:appActivity: com.tvs_pgm.tvs.MainActivity, appium:appPackage: com.tvs.tvs_pgm_uat, appium:automationName: UIAutomator2, appium:databaseEnabled: false, appium:desired: {appActivity: com.tvs_pgm.tvs.MainActivity, appPackage: com.tvs.tvs_pgm_uat, automationName: UIAutomator2, deviceName: Samsung SM-A528B, dontStopAppOnReset: true, noReset: true, platformName: ANDROID}, appium:deviceApiLevel: 34, appium:deviceManufacturer: samsung, appium:deviceModel: SM-A528B, appium:deviceName: RZCT30H06GF, appium:deviceScreenDensity: 450, appium:deviceScreenSize: 1080x2400, appium:deviceUDID: RZCT30H06GF, appium:dontStopAppOnReset: true, appium:javascriptEnabled: true, appium:locationContextEnabled: false, appium:networkConnectionEnabled: true, appium:noReset: true, appium:pixelRatio: 2.8125, appium:platformVersion: 14, appium:statBarHeight: 87, appium:takesScreenshot: true, appium:viewportRect: {height: 2090, left: 0, top: 87, width: 1080}, appium:warnings: {}, appium:webStorageEnabled: false, platformName: ANDROID}
Session ID: 2b89d975-5f61-45d7-b82e-bf2e89a240bb">
      <![CDATA[org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up
Build info: version: '4.34.0', revision: '707dcb4246*'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.12'
Driver info: io.appium.java_client.android.AndroidDriver
Command: [2b89d975-5f61-45d7-b82e-bf2e89a240bb, screenshot {}]
Capabilities {appium:appActivity: com.tvs_pgm.tvs.MainActivity, appium:appPackage: com.tvs.tvs_pgm_uat, appium:automationName: UIAutomator2, appium:databaseEnabled: false, appium:desired: {appActivity: com.tvs_pgm.tvs.MainActivity, appPackage: com.tvs.tvs_pgm_uat, automationName: UIAutomator2, deviceName: Samsung SM-A528B, dontStopAppOnReset: true, noReset: true, platformName: ANDROID}, appium:deviceApiLevel: 34, appium:deviceManufacturer: samsung, appium:deviceModel: SM-A528B, appium:deviceName: RZCT30H06GF, appium:deviceScreenDensity: 450, appium:deviceScreenSize: 1080x2400, appium:deviceUDID: RZCT30H06GF, appium:dontStopAppOnReset: true, appium:javascriptEnabled: true, appium:locationContextEnabled: false, appium:networkConnectionEnabled: true, appium:noReset: true, appium:pixelRatio: 2.8125, appium:platformVersion: 14, appium:statBarHeight: 87, appium:takesScreenshot: true, appium:viewportRect: {height: 2090, left: 0, top: 87, width: 1080}, appium:warnings: {}, appium:webStorageEnabled: false, platformName: ANDROID}
Session ID: 2b89d975-5f61-45d7-b82e-bf2e89a240bb
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:215)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:244)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:544)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:617)
at io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:235)
at org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:333)
at io.appium.java_client.AppiumDriver.getScreenshotAs(AppiumDriver.java:244)
at com.tvs.pgm.twoW.mobile.tests.BaseTest.captureResult(BaseTest.java:76)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 37 stack frames]]>
    </failure>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterClass tearDownDriver" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterClass tearDownDriver -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.013">
    <failure type="org.openqa.selenium.WebDriverException" message="An unknown server-side error occurred while processing the command. Original error: &amp;apos;GET /screenshot&amp;apos; cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details
Build info: version: &amp;apos;4.34.0&amp;apos;, revision: &amp;apos;707dcb4246*&amp;apos;
System info: os.name: &amp;apos;Windows 10&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;10.0&amp;apos;, java.version: &amp;apos;17.0.12&amp;apos;
Driver info: io.appium.java_client.android.AndroidDriver
Command: [2b89d975-5f61-45d7-b82e-bf2e89a240bb, screenshot {}]
Capabilities {appium:appActivity: com.tvs_pgm.tvs.MainActivity, appium:appPackage: com.tvs.tvs_pgm_uat, appium:automationName: UIAutomator2, appium:databaseEnabled: false, appium:desired: {appActivity: com.tvs_pgm.tvs.MainActivity, appPackage: com.tvs.tvs_pgm_uat, automationName: UIAutomator2, deviceName: Samsung SM-A528B, dontStopAppOnReset: true, noReset: true, platformName: ANDROID}, appium:deviceApiLevel: 34, appium:deviceManufacturer: samsung, appium:deviceModel: SM-A528B, appium:deviceName: RZCT30H06GF, appium:deviceScreenDensity: 450, appium:deviceScreenSize: 1080x2400, appium:deviceUDID: RZCT30H06GF, appium:dontStopAppOnReset: true, appium:javascriptEnabled: true, appium:locationContextEnabled: false, appium:networkConnectionEnabled: true, appium:noReset: true, appium:pixelRatio: 2.8125, appium:platformVersion: 14, appium:statBarHeight: 87, appium:takesScreenshot: true, appium:viewportRect: {height: 2090, left: 0, top: 87, width: 1080}, appium:warnings: {}, appium:webStorageEnabled: false, platformName: ANDROID}
Session ID: 2b89d975-5f61-45d7-b82e-bf2e89a240bb">
      <![CDATA[org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: 'GET /screenshot' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details
Build info: version: '4.34.0', revision: '707dcb4246*'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.12'
Driver info: io.appium.java_client.android.AndroidDriver
Command: [2b89d975-5f61-45d7-b82e-bf2e89a240bb, screenshot {}]
Capabilities {appium:appActivity: com.tvs_pgm.tvs.MainActivity, appium:appPackage: com.tvs.tvs_pgm_uat, appium:automationName: UIAutomator2, appium:databaseEnabled: false, appium:desired: {appActivity: com.tvs_pgm.tvs.MainActivity, appPackage: com.tvs.tvs_pgm_uat, automationName: UIAutomator2, deviceName: Samsung SM-A528B, dontStopAppOnReset: true, noReset: true, platformName: ANDROID}, appium:deviceApiLevel: 34, appium:deviceManufacturer: samsung, appium:deviceModel: SM-A528B, appium:deviceName: RZCT30H06GF, appium:deviceScreenDensity: 450, appium:deviceScreenSize: 1080x2400, appium:deviceUDID: RZCT30H06GF, appium:dontStopAppOnReset: true, appium:javascriptEnabled: true, appium:locationContextEnabled: false, appium:networkConnectionEnabled: true, appium:noReset: true, appium:pixelRatio: 2.8125, appium:platformVersion: 14, appium:statBarHeight: 87, appium:takesScreenshot: true, appium:viewportRect: {height: 2090, left: 0, top: 87, width: 1080}, appium:warnings: {}, appium:webStorageEnabled: false, platformName: ANDROID}
Session ID: 2b89d975-5f61-45d7-b82e-bf2e89a240bb
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:215)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:244)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:544)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:617)
at io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:235)
at org.openqa.selenium.remote.RemoteWebDriver.getScreenshotAs(RemoteWebDriver.java:333)
at io.appium.java_client.AppiumDriver.getScreenshotAs(AppiumDriver.java:244)
at com.tvs.pgm.twoW.mobile.tests.BaseTest.captureResult(BaseTest.java:76)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 37 stack frames]]>
    </failure>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeMethod startTest" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod startTest -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterMethod captureResult" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod captureResult -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterClass tearDownDriver" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterClass tearDownDriver -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="verifyLocationPermissionPopup" time="10.89">
    <failure type="org.openqa.selenium.NoSuchElementException" message="Can&amp;apos;t locate an element by this strategy: By.chained({AppiumBy.id: com.android.permissioncontroller:id/permission_message})">
      <![CDATA[org.openqa.selenium.NoSuchElementException: Can't locate an element by this strategy: By.chained({AppiumBy.id: com.android.permissioncontroller:id/permission_message})
at io.appium.java_client.pagefactory.AppiumElementLocator.findElement(AppiumElementLocator.java:166)
at io.appium.java_client.pagefactory.interceptors.InterceptorOfASingleElement.call(InterceptorOfASingleElement.java:74)
at io.appium.java_client.proxy.Interceptor.intercept(Interceptor.java:78)
at org.openqa.selenium.remote.RemoteWebElement$ByteBuddy$mb1pSSqE.isDisplayed(Unknown Source)
at com.tvs.pgm.twoW.mobile.pages.LoginPage.isLocationPermissionPopupDisplayed(LoginPage.java:42)
at com.tvs.pgm.twoW.mobile.tests.LoginTest.verifyLocationPermissionPopup(LoginTest.java:28)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: org.openqa.selenium.TimeoutException: Expected condition failed: waiting for io.appium.java_client.pagefactory.AppiumElementLocator$WaitingFunction@5c8e67b9 (tried for 1 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.FluentWait.timeoutException(FluentWait.java:265)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at io.appium.java_client.pagefactory.AppiumElementLocator.waitFor(AppiumElementLocator.java:135)
at io.appium.java_client.pagefactory.AppiumElementLocator.findElement(AppiumElementLocator.java:160)
... 33 more
Caused by: org.openqa.selenium.NoSuchElementException: Cannot locate an element using By.chained({AppiumBy.id: com.android.permissioncontroller:id/permission_message})
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.34.0', revision: '707dcb4246*'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.12'
Driver info: driver.version: RemoteWebDriver
at io.appium.java_client.pagefactory.bys.builder.ByChained.findElement(ByChained.java:74)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$1.findElement(ElementLocation.java:139)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:81)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at io.appium.java_client.pagefactory.bys.ContentMappedBy.findElement(ContentMappedBy.java:54)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$1.findElement(ElementLocation.java:139)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:81)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at io.appium.java_client.pagefactory.AppiumElementLocator.lambda$findElement$1(AppiumElementLocator.java:160)
at io.appium.java_client.pagefactory.AppiumElementLocator$WaitingFunction.apply(AppiumElementLocator.java:217)
at io.appium.java_client.pagefactory.AppiumElementLocator$WaitingFunction.apply(AppiumElementLocator.java:210)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 35 more
... Removed 27 stack frames]]>
    </failure>
  </testcase> <!-- verifyLocationPermissionPopup -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="verifyLocationPermissionOptionText" time="10.138">
    <failure type="org.openqa.selenium.NoSuchElementException" message="Can&amp;apos;t locate an element by this strategy: By.chained({AppiumBy.id: com.android.permissioncontroller:id/permission_allow_foreground_only_button})">
      <![CDATA[org.openqa.selenium.NoSuchElementException: Can't locate an element by this strategy: By.chained({AppiumBy.id: com.android.permissioncontroller:id/permission_allow_foreground_only_button})
at io.appium.java_client.pagefactory.AppiumElementLocator.findElement(AppiumElementLocator.java:166)
at io.appium.java_client.pagefactory.interceptors.InterceptorOfASingleElement.call(InterceptorOfASingleElement.java:74)
at io.appium.java_client.proxy.Interceptor.intercept(Interceptor.java:78)
at org.openqa.selenium.remote.RemoteWebElement$ByteBuddy$mb1pSSqE.getText(Unknown Source)
at com.tvs.pgm.twoW.mobile.pages.LoginPage.getLocationPermissionText(LoginPage.java:46)
at com.tvs.pgm.twoW.mobile.tests.LoginTest.verifyLocationPermissionOptionText(LoginTest.java:33)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: org.openqa.selenium.TimeoutException: Expected condition failed: waiting for io.appium.java_client.pagefactory.AppiumElementLocator$WaitingFunction@7dd611c8 (tried for 1 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.FluentWait.timeoutException(FluentWait.java:265)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at io.appium.java_client.pagefactory.AppiumElementLocator.waitFor(AppiumElementLocator.java:135)
at io.appium.java_client.pagefactory.AppiumElementLocator.findElement(AppiumElementLocator.java:160)
... 33 more
Caused by: org.openqa.selenium.NoSuchElementException: Cannot locate an element using By.chained({AppiumBy.id: com.android.permissioncontroller:id/permission_allow_foreground_only_button})
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.34.0', revision: '707dcb4246*'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.12'
Driver info: driver.version: RemoteWebDriver
at io.appium.java_client.pagefactory.bys.builder.ByChained.findElement(ByChained.java:74)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$1.findElement(ElementLocation.java:139)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at io.appium.java_client.pagefactory.bys.ContentMappedBy.findElement(ContentMappedBy.java:54)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$1.findElement(ElementLocation.java:139)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at io.appium.java_client.pagefactory.AppiumElementLocator.lambda$findElement$1(AppiumElementLocator.java:160)
at io.appium.java_client.pagefactory.AppiumElementLocator$WaitingFunction.apply(AppiumElementLocator.java:217)
at io.appium.java_client.pagefactory.AppiumElementLocator$WaitingFunction.apply(AppiumElementLocator.java:210)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 35 more
... Removed 27 stack frames]]>
    </failure>
  </testcase> <!-- verifyLocationPermissionOptionText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="allowLocationPermission" time="10.127">
    <failure type="org.openqa.selenium.NoSuchElementException" message="Can&amp;apos;t locate an element by this strategy: By.chained({AppiumBy.id: com.android.permissioncontroller:id/permission_allow_foreground_only_button})">
      <![CDATA[org.openqa.selenium.NoSuchElementException: Can't locate an element by this strategy: By.chained({AppiumBy.id: com.android.permissioncontroller:id/permission_allow_foreground_only_button})
at io.appium.java_client.pagefactory.AppiumElementLocator.findElement(AppiumElementLocator.java:166)
at io.appium.java_client.pagefactory.interceptors.InterceptorOfASingleElement.call(InterceptorOfASingleElement.java:74)
at io.appium.java_client.proxy.Interceptor.intercept(Interceptor.java:78)
at org.openqa.selenium.remote.RemoteWebElement$ByteBuddy$mb1pSSqE.click(Unknown Source)
at com.tvs.pgm.twoW.mobile.pages.LoginPage.allowLocationPermission(LoginPage.java:50)
at com.tvs.pgm.twoW.mobile.tests.LoginTest.allowLocationPermission(LoginTest.java:38)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: org.openqa.selenium.TimeoutException: Expected condition failed: waiting for io.appium.java_client.pagefactory.AppiumElementLocator$WaitingFunction@468dda3e (tried for 1 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.FluentWait.timeoutException(FluentWait.java:265)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at io.appium.java_client.pagefactory.AppiumElementLocator.waitFor(AppiumElementLocator.java:135)
at io.appium.java_client.pagefactory.AppiumElementLocator.findElement(AppiumElementLocator.java:160)
... 33 more
Caused by: org.openqa.selenium.NoSuchElementException: Cannot locate an element using By.chained({AppiumBy.id: com.android.permissioncontroller:id/permission_allow_foreground_only_button})
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.34.0', revision: '707dcb4246*'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.12'
Driver info: driver.version: RemoteWebDriver
at io.appium.java_client.pagefactory.bys.builder.ByChained.findElement(ByChained.java:74)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$1.findElement(ElementLocation.java:139)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at io.appium.java_client.pagefactory.bys.ContentMappedBy.findElement(ContentMappedBy.java:54)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$1.findElement(ElementLocation.java:139)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at io.appium.java_client.pagefactory.AppiumElementLocator.lambda$findElement$1(AppiumElementLocator.java:160)
at io.appium.java_client.pagefactory.AppiumElementLocator$WaitingFunction.apply(AppiumElementLocator.java:217)
at io.appium.java_client.pagefactory.AppiumElementLocator$WaitingFunction.apply(AppiumElementLocator.java:210)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
... 35 more
... Removed 27 stack frames]]>
    </failure>
  </testcase> <!-- allowLocationPermission -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="verifyMobileNumberFieldDisplayed" time="9.742">
    <failure type="org.openqa.selenium.WebDriverException" message="An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up
Build info: version: &amp;apos;4.34.0&amp;apos;, revision: &amp;apos;707dcb4246*&amp;apos;
System info: os.name: &amp;apos;Windows 10&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;10.0&amp;apos;, java.version: &amp;apos;17.0.12&amp;apos;
Driver info: io.appium.java_client.android.AndroidDriver
Command: [2b89d975-5f61-45d7-b82e-bf2e89a240bb, findElement {using=xpath, value=//android.view.View[@content-desc=&amp;quot;Enter Mobile Number&amp;quot;]}]
Capabilities {appium:appActivity: com.tvs_pgm.tvs.MainActivity, appium:appPackage: com.tvs.tvs_pgm_uat, appium:automationName: UIAutomator2, appium:databaseEnabled: false, appium:desired: {appActivity: com.tvs_pgm.tvs.MainActivity, appPackage: com.tvs.tvs_pgm_uat, automationName: UIAutomator2, deviceName: Samsung SM-A528B, dontStopAppOnReset: true, noReset: true, platformName: ANDROID}, appium:deviceApiLevel: 34, appium:deviceManufacturer: samsung, appium:deviceModel: SM-A528B, appium:deviceName: RZCT30H06GF, appium:deviceScreenDensity: 450, appium:deviceScreenSize: 1080x2400, appium:deviceUDID: RZCT30H06GF, appium:dontStopAppOnReset: true, appium:javascriptEnabled: true, appium:locationContextEnabled: false, appium:networkConnectionEnabled: true, appium:noReset: true, appium:pixelRatio: 2.8125, appium:platformVersion: 14, appium:statBarHeight: 87, appium:takesScreenshot: true, appium:viewportRect: {height: 2090, left: 0, top: 87, width: 1080}, appium:warnings: {}, appium:webStorageEnabled: false, platformName: ANDROID}
Session ID: 2b89d975-5f61-45d7-b82e-bf2e89a240bb">
      <![CDATA[org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up
Build info: version: '4.34.0', revision: '707dcb4246*'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.12'
Driver info: io.appium.java_client.android.AndroidDriver
Command: [2b89d975-5f61-45d7-b82e-bf2e89a240bb, findElement {using=xpath, value=//android.view.View[@content-desc="Enter Mobile Number"]}]
Capabilities {appium:appActivity: com.tvs_pgm.tvs.MainActivity, appium:appPackage: com.tvs.tvs_pgm_uat, appium:automationName: UIAutomator2, appium:databaseEnabled: false, appium:desired: {appActivity: com.tvs_pgm.tvs.MainActivity, appPackage: com.tvs.tvs_pgm_uat, automationName: UIAutomator2, deviceName: Samsung SM-A528B, dontStopAppOnReset: true, noReset: true, platformName: ANDROID}, appium:deviceApiLevel: 34, appium:deviceManufacturer: samsung, appium:deviceModel: SM-A528B, appium:deviceName: RZCT30H06GF, appium:deviceScreenDensity: 450, appium:deviceScreenSize: 1080x2400, appium:deviceUDID: RZCT30H06GF, appium:dontStopAppOnReset: true, appium:javascriptEnabled: true, appium:locationContextEnabled: false, appium:networkConnectionEnabled: true, appium:noReset: true, appium:pixelRatio: 2.8125, appium:platformVersion: 14, appium:statBarHeight: 87, appium:takesScreenshot: true, appium:viewportRect: {height: 2090, left: 0, top: 87, width: 1080}, appium:warnings: {}, appium:webStorageEnabled: false, platformName: ANDROID}
Session ID: 2b89d975-5f61-45d7-b82e-bf2e89a240bb
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:215)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:244)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:544)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at io.appium.java_client.pagefactory.bys.builder.ByChained.lambda$getSearchingFunction$0(ByChained.java:41)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
at io.appium.java_client.pagefactory.bys.builder.ByChained.findElement(ByChained.java:72)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$1.findElement(ElementLocation.java:139)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at io.appium.java_client.pagefactory.bys.ContentMappedBy.findElement(ContentMappedBy.java:54)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$1.findElement(ElementLocation.java:139)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at io.appium.java_client.pagefactory.AppiumElementLocator.lambda$findElement$1(AppiumElementLocator.java:160)
at io.appium.java_client.pagefactory.AppiumElementLocator$WaitingFunction.apply(AppiumElementLocator.java:217)
at io.appium.java_client.pagefactory.AppiumElementLocator$WaitingFunction.apply(AppiumElementLocator.java:210)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
at io.appium.java_client.pagefactory.AppiumElementLocator.waitFor(AppiumElementLocator.java:135)
at io.appium.java_client.pagefactory.AppiumElementLocator.findElement(AppiumElementLocator.java:160)
at io.appium.java_client.pagefactory.interceptors.InterceptorOfASingleElement.call(InterceptorOfASingleElement.java:74)
at io.appium.java_client.proxy.Interceptor.intercept(Interceptor.java:78)
at org.openqa.selenium.remote.RemoteWebElement$ByteBuddy$mb1pSSqE.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
at com.tvs.pgm.twoW.mobile.pages.LoginPage.isEnterMobileNumberDisplayed(LoginPage.java:55)
at com.tvs.pgm.twoW.mobile.tests.LoginTest.verifyMobileNumberFieldDisplayed(LoginTest.java:43)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 32 stack frames]]>
    </failure>
  </testcase> <!-- verifyMobileNumberFieldDisplayed -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="verifyInvalidMobileNumberBlocked" time="0.0">
    <skipped/>
  </testcase> <!-- verifyInvalidMobileNumberBlocked -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="enterValidMobileNumber" time="0.0">
    <skipped/>
  </testcase> <!-- enterValidMobileNumber -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="clickVerifyNumberButton" time="0.0">
    <skipped/>
  </testcase> <!-- clickVerifyNumberButton -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="verifyOtpScreenDisplayed" time="0.001">
    <skipped/>
  </testcase> <!-- verifyOtpScreenDisplayed -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="clickOtpField" time="0.0">
    <skipped/>
  </testcase> <!-- clickOtpField -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.LoginTest" name="enterOtp" time="0.0">
    <skipped/>
  </testcase> <!-- enterOtp -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyNotificationAccessText" time="0.031">
    <failure type="org.openqa.selenium.WebDriverException" message="An unknown server-side error occurred while processing the command. Original error: &amp;apos;POST /element&amp;apos; cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details
Build info: version: &amp;apos;4.34.0&amp;apos;, revision: &amp;apos;707dcb4246*&amp;apos;
System info: os.name: &amp;apos;Windows 10&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;10.0&amp;apos;, java.version: &amp;apos;17.0.12&amp;apos;
Driver info: io.appium.java_client.android.AndroidDriver
Command: [2b89d975-5f61-45d7-b82e-bf2e89a240bb, findElement {using=class name, value=android.widget.TextView}]
Capabilities {appium:appActivity: com.tvs_pgm.tvs.MainActivity, appium:appPackage: com.tvs.tvs_pgm_uat, appium:automationName: UIAutomator2, appium:databaseEnabled: false, appium:desired: {appActivity: com.tvs_pgm.tvs.MainActivity, appPackage: com.tvs.tvs_pgm_uat, automationName: UIAutomator2, deviceName: Samsung SM-A528B, dontStopAppOnReset: true, noReset: true, platformName: ANDROID}, appium:deviceApiLevel: 34, appium:deviceManufacturer: samsung, appium:deviceModel: SM-A528B, appium:deviceName: RZCT30H06GF, appium:deviceScreenDensity: 450, appium:deviceScreenSize: 1080x2400, appium:deviceUDID: RZCT30H06GF, appium:dontStopAppOnReset: true, appium:javascriptEnabled: true, appium:locationContextEnabled: false, appium:networkConnectionEnabled: true, appium:noReset: true, appium:pixelRatio: 2.8125, appium:platformVersion: 14, appium:statBarHeight: 87, appium:takesScreenshot: true, appium:viewportRect: {height: 2090, left: 0, top: 87, width: 1080}, appium:warnings: {}, appium:webStorageEnabled: false, platformName: ANDROID}
Session ID: 2b89d975-5f61-45d7-b82e-bf2e89a240bb">
      <![CDATA[org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: 'POST /element' cannot be proxied to UiAutomator2 server because the instrumentation process is not running (probably crashed). Check the server log and/or the logcat output for more details
Build info: version: '4.34.0', revision: '707dcb4246*'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.12'
Driver info: io.appium.java_client.android.AndroidDriver
Command: [2b89d975-5f61-45d7-b82e-bf2e89a240bb, findElement {using=class name, value=android.widget.TextView}]
Capabilities {appium:appActivity: com.tvs_pgm.tvs.MainActivity, appium:appPackage: com.tvs.tvs_pgm_uat, appium:automationName: UIAutomator2, appium:databaseEnabled: false, appium:desired: {appActivity: com.tvs_pgm.tvs.MainActivity, appPackage: com.tvs.tvs_pgm_uat, automationName: UIAutomator2, deviceName: Samsung SM-A528B, dontStopAppOnReset: true, noReset: true, platformName: ANDROID}, appium:deviceApiLevel: 34, appium:deviceManufacturer: samsung, appium:deviceModel: SM-A528B, appium:deviceName: RZCT30H06GF, appium:deviceScreenDensity: 450, appium:deviceScreenSize: 1080x2400, appium:deviceUDID: RZCT30H06GF, appium:dontStopAppOnReset: true, appium:javascriptEnabled: true, appium:locationContextEnabled: false, appium:networkConnectionEnabled: true, appium:noReset: true, appium:pixelRatio: 2.8125, appium:platformVersion: 14, appium:statBarHeight: 87, appium:takesScreenshot: true, appium:viewportRect: {height: 2090, left: 0, top: 87, width: 1080}, appium:warnings: {}, appium:webStorageEnabled: false, platformName: ANDROID}
Session ID: 2b89d975-5f61-45d7-b82e-bf2e89a240bb
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:215)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:244)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:544)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:66)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at io.appium.java_client.pagefactory.bys.builder.ByChained.lambda$getSearchingFunction$0(ByChained.java:41)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
at io.appium.java_client.pagefactory.bys.builder.ByChained.findElement(ByChained.java:72)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$1.findElement(ElementLocation.java:139)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at io.appium.java_client.pagefactory.bys.ContentMappedBy.findElement(ContentMappedBy.java:54)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$1.findElement(ElementLocation.java:139)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:367)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:361)
at io.appium.java_client.pagefactory.AppiumElementLocator.lambda$findElement$1(AppiumElementLocator.java:160)
at io.appium.java_client.pagefactory.AppiumElementLocator$WaitingFunction.apply(AppiumElementLocator.java:217)
at io.appium.java_client.pagefactory.AppiumElementLocator$WaitingFunction.apply(AppiumElementLocator.java:210)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
at io.appium.java_client.pagefactory.AppiumElementLocator.waitFor(AppiumElementLocator.java:135)
at io.appium.java_client.pagefactory.AppiumElementLocator.findElement(AppiumElementLocator.java:160)
at io.appium.java_client.pagefactory.interceptors.InterceptorOfASingleElement.call(InterceptorOfASingleElement.java:74)
at io.appium.java_client.proxy.Interceptor.intercept(Interceptor.java:78)
at org.openqa.selenium.remote.RemoteWebElement$ByteBuddy$OZu9ikFf.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:304)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:290)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:287)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:203)
at com.tvs.pgm.twoW.mobile.pages.DashboardPage.getNotificationAccessText(DashboardPage.java:105)
at com.tvs.pgm.twoW.mobile.tests.DashboardTest.verifyNotificationAccessText(DashboardTest.java:34)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
... Removed 32 stack frames]]>
    </failure>
  </testcase> <!-- verifyNotificationAccessText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyAllowButtonDisplayed" time="0.0">
    <skipped/>
  </testcase> <!-- verifyAllowButtonDisplayed -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickAllowButton" time="0.0">
    <skipped/>
  </testcase> <!-- clickAllowButton -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyScanForRewardsText" time="0.0">
    <skipped/>
  </testcase> <!-- verifyScanForRewardsText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickScanForRewardsButton" time="0.001">
    <skipped/>
  </testcase> <!-- clickScanForRewardsButton -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyCameraPermissionText" time="0.0">
    <skipped/>
  </testcase> <!-- verifyCameraPermissionText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyWhileUsingTheAppText" time="0.0">
    <skipped/>
  </testcase> <!-- verifyWhileUsingTheAppText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickWhileUsingTheApp" time="0.0">
    <skipped/>
  </testcase> <!-- clickWhileUsingTheApp -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyRedeemText" time="0.0">
    <skipped/>
  </testcase> <!-- verifyRedeemText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickRedeem" time="0.0">
    <skipped/>
  </testcase> <!-- clickRedeem -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyEnterAmountTextDisplayed" time="0.0">
    <skipped/>
  </testcase> <!-- verifyEnterAmountTextDisplayed -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickAndEnterAmountRedeem" time="0.0">
    <skipped/>
  </testcase> <!-- clickAndEnterAmountRedeem -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyRedeemAmountText" time="0.0">
    <skipped/>
  </testcase> <!-- verifyRedeemAmountText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickOnRedeemAmountText" time="0.0">
    <skipped/>
  </testcase> <!-- clickOnRedeemAmountText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickOnRedeemAmount" time="0.0">
    <skipped/>
  </testcase> <!-- clickOnRedeemAmount -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyIsRedeemOtpScreenDisplayed" time="0.0">
    <skipped/>
  </testcase> <!-- verifyIsRedeemOtpScreenDisplayed -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickOtpField" time="0.001">
    <skipped/>
  </testcase> <!-- clickOtpField -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="enterRedeemOtp" time="0.0">
    <skipped/>
  </testcase> <!-- enterRedeemOtp -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyIsRedeemSubmitButtonEnable" time="0.0">
    <skipped/>
  </testcase> <!-- verifyIsRedeemSubmitButtonEnable -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickOnOtpSubmitButton" time="0.0">
    <skipped/>
  </testcase> <!-- clickOnOtpSubmitButton -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyUniqueMRNGeneration" time="0.0">
    <skipped/>
  </testcase> <!-- verifyUniqueMRNGeneration -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickOnMrmNumberOkText" time="0.0">
    <skipped/>
  </testcase> <!-- clickOnMrmNumberOkText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyFindPartsText" time="0.0">
    <skipped/>
  </testcase> <!-- verifyFindPartsText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickFindParts" time="0.001">
    <skipped/>
  </testcase> <!-- clickFindParts -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickCancelOnWhatsAppBot" time="0.0">
    <skipped/>
  </testcase> <!-- clickCancelOnWhatsAppBot -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyHelpText" time="0.0">
    <skipped/>
  </testcase> <!-- verifyHelpText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickOnHelp" time="0.0">
    <skipped/>
  </testcase> <!-- clickOnHelp -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyCreateOrRequestQueryText" time="0.0">
    <skipped/>
  </testcase> <!-- verifyCreateOrRequestQueryText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickCreateOrRequestQuery" time="0.0">
    <skipped/>
  </testcase> <!-- clickCreateOrRequestQuery -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyQueryTitleText" time="0.0">
    <skipped/>
  </testcase> <!-- verifyQueryTitleText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickAndEnterQueryTitle" time="0.0">
    <skipped/>
  </testcase> <!-- clickAndEnterQueryTitle -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifySelectCategoryText" time="0.0">
    <skipped/>
  </testcase> <!-- verifySelectCategoryText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickOnSelectCategory" time="0.001">
    <skipped/>
  </testcase> <!-- clickOnSelectCategory -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyChooseCategoryText" time="0.0">
    <skipped/>
  </testcase> <!-- verifyChooseCategoryText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickChooseCategory" time="0.0">
    <skipped/>
  </testcase> <!-- clickChooseCategory -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyAddDescriptionText" time="0.0">
    <skipped/>
  </testcase> <!-- verifyAddDescriptionText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickAndEnterAddDescription" time="0.0">
    <skipped/>
  </testcase> <!-- clickAndEnterAddDescription -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyCreateQueryText" time="0.0">
    <skipped/>
  </testcase> <!-- verifyCreateQueryText -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickOnCreateQuery" time="0.0">
    <skipped/>
  </testcase> <!-- clickOnCreateQuery -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="clickOnHelpQuery" time="0.0">
    <skipped/>
  </testcase> <!-- clickOnHelpQuery -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.DashboardTest" name="verifyAllQueryStatus" time="0.0">
    <skipped/>
  </testcase> <!-- verifyAllQueryStatus -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@BeforeSuite setupSuite" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite setupSuite -->
  <testcase classname="com.tvs.pgm.twoW.mobile.tests.BaseTest" name="@AfterSuite tearDownSuite" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite tearDownSuite -->
</testsuite> <!-- 2W Tests -->
